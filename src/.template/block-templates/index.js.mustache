{{^isCoreBlockVariant}}
/**
 * Registers a new block provided a unique name and an object defining its behavior.
 *
 * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block
 */

/**
 * External Dependencies
 */


/**
 * WordPress Dependencies
 */
import { __ } from '@wordpress/i18n';
import { registerBlockType } from '@wordpress/blocks';

/**
 * Internal Dependencies
 */

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * All files containing `style` keyword are bundled together. The code used
 * gets applied both to the front of your site and to the editor. All other files
 * get applied to the editor only.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './style.scss';
import './editor.scss';
import edit from './edit';
import save from './save';

import metadata from './block.json';

const { name } = metadata;

const settings = {
	edit,
	save,
};

registerBlockType(name, { ...metadata, ...settings });

{{/isCoreBlockVariant}}
{{#isCoreBlockVariant}}
/**
 * WordPress Dependencies
 */
import { __ } from '@wordpress/i18n';
import { addFilter } from '@wordpress/hooks';
import { createHigherOrderComponent } from '@wordpress/compose';
import { Fragment } from '@wordpress/element';

/**
 * Internal Dependencies
 */
import Controls from './controls';

import './style.scss';
import './editor.scss';

const BLOCKNAME = {{coreBlockName}}
const BLOCKIDENTIFIER = 'prc-block/{{slug}}';

addFilter(
	'editor.BlockEdit',
	BLOCKIDENTIFIER,
	createHigherOrderComponent(
		(BlockEdit) =>
			function {{slugPascalCase}}(props) {
				const { name, attributes, setAttributes } = props;
				if (BLOCKNAME !== name) {
					return <BlockEdit {...props} />;
				}

				return (
					<Fragment>
						<BlockEdit {...props} />
						<Controls {...{attributes, setAttributes, context: false}}/>
					</Fragment>
				);
			},
		'with{{slugPascalCase}}Controls',
	),
	21,
);
{{/isCoreBlockVariant}}
