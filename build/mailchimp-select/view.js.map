{"version":3,"file":"mailchimp-select/view.js","mappings":"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","sources":["webpack://@pewresearch/prc-block-library/webpack/bootstrap","webpack://@pewresearch/prc-block-library/webpack/runtime/define property getters","webpack://@pewresearch/prc-block-library/webpack/runtime/hasOwnProperty shorthand","webpack://@pewresearch/prc-block-library/external module \"@wordpress/interactivity\"","webpack://@pewresearch/prc-block-library/./src/mailchimp-select/view.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getContext\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getContext), [\"getElement\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getElement), [\"store\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store) });","/**\n * WordPress Dependencies\n */\nimport { store, getElement, getContext } from '@wordpress/interactivity';\n\n/**\n * Internal Dependencies\n */\nconst NAMESPACE = 'prc-block/mailchimp-select';\nconst ENDPOINT = '/prc-api/v3/mailchimp/subscribe';\n\nconst { state } = store('prc-block/mailchimp-select', {\n\tstate: {},\n\tactions: {\n\t\tonInputChange: (event) => {\n\t\t\tconst { value } = event.target;\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\tconst { id } = ref;\n\t\t\t// Store the value in the global state where we store all primitve inputs.\n\t\t\tstate[id].value = value;\n\t\t\t// Also, store the value in this block's context so we can use it in the submitHandler.\n\t\t\tcontext.emailAddress = state[id].value;\n\t\t},\n\t\tonButtonClick: (event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\tconst { id } = ref;\n\t\t\tcontext.captchaHidden = false;\n\t\t},\n\t\tonCheckboxClick: (event) => {\n\t\t\tif (event.target.tagName === 'LABEL') {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\tconst input = ref.querySelector('input');\n\t\t\tconst { id } = input;\n\t\t\tconst { checked, value, type } = state[id];\n\n\t\t\tstate[id].checked = !checked;\n\n\t\t\tconst index = context.interests.indexOf(value);\n\t\t\tif (index > -1) {\n\t\t\t\tcontext.interests.splice(index, 1);\n\t\t\t} else {\n\t\t\t\tcontext.interests.push(value);\n\t\t\t}\n\t\t},\n\t\tonCheckboxMouseEnter: () => {},\n\t\tonButtonMouseEnter: () => {},\n\t},\n\tcallbacks: {\n\t\tonInit: () => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst context = getContext();\n\n\t\t\tconst input = ref.querySelector(\n\t\t\t\t'input.wp-block-prc-block-form-input-text'\n\t\t\t);\n\t\t\tif (input?.id) {\n\t\t\t\tcontext.inputId = input?.id;\n\t\t\t}\n\t\t\tconst button = ref.querySelector('.wp-element-button');\n\t\t\tif (button?.id) {\n\t\t\t\tcontext.buttonId = button?.id;\n\t\t\t}\n\t\t},\n\t\tonInputChange: () => {\n\t\t\t// An exercise in how concise can we make this function.\n\t\t\tconst { emailAddress, buttonId } = getContext();\n\t\t\tstate[buttonId].isDisabled = !(\n\t\t\t\temailAddress && emailAddress.includes('@')\n\t\t\t);\n\t\t},\n\t\t// This is the callback that runs once the captcha has verified the user is not a robot.\n\t\tonCaptchaVerify: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { NONCE, captchaToken, captchaHidden } = context;\n\t\t\tconst isCaptchaVisible = !captchaHidden;\n\n\t\t\tif (!isCaptchaVisible) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!captchaToken) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { apiFetch } = window.wp;\n\t\t\tconst { isURL, buildQueryString } = window.wp.url;\n\n\t\t\tconst url = document.URL;\n\n\t\t\tif (!isURL(url)) {\n\t\t\t\treturn new Error('Invalid url', url);\n\t\t\t}\n\t\t\tapiFetch.use(apiFetch.createNonceMiddleware(NONCE));\n\n\t\t\tapiFetch({\n\t\t\t\tpath: ENDPOINT,\n\t\t\t\tmethod: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\temail: context.emailAddress,\n\t\t\t\t\tcaptcha_token: captchaToken,\n\t\t\t\t\tinterests: context?.interests.join(','),\n\t\t\t\t\tapi_key: 'mailchimp-select',\n\t\t\t\t\torigin_url: url,\n\t\t\t\t},\n\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\tcontext.isSuccess = true;\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tcontext.isError = true;\n\t\t\t\t});\n\t\t},\n\t\tonSuccess: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { isSuccess, buttonId, inputId } = context;\n\t\t\tif (null !== isSuccess) {\n\t\t\t\tstate[inputId].isSuccess = isSuccess;\n\t\t\t\tstate[buttonId].isSuccess = isSuccess;\n\t\t\t\tif (true === isSuccess) {\n\t\t\t\t\tstate[buttonId].text = 'Success';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonError: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { isError, buttonId, inputId } = context;\n\t\t\tif (null !== isError) {\n\t\t\t\tstate[inputId].isError = isError;\n\t\t\t\tstate[buttonId].isError = isError;\n\t\t\t\tif (true === isError) {\n\t\t\t\t\tstate[buttonId].text = 'Error';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n});\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","x","d","state","store","actions","onInputChange","event","value","target","context","getContext","ref","getElement","id","emailAddress","onButtonClick","captchaHidden","onCheckboxClick","tagName","preventDefault","input","querySelector","checked","type","index","interests","indexOf","splice","push","onCheckboxMouseEnter","onButtonMouseEnter","callbacks","onInit","inputId","button","buttonId","isDisabled","includes","onCaptchaVerify","NONCE","captchaToken","apiFetch","window","wp","isURL","buildQueryString","url","document","URL","Error","use","createNonceMiddleware","path","method","data","email","captcha_token","join","api_key","origin_url","then","response","isSuccess","catch","e","isError","onSuccess","text","onError"],"sourceRoot":""}