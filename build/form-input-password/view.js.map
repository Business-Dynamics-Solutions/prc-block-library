{"version":3,"file":"form-input-password/view.js","mappings":"2CACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,ICIlF,MAAM,GAJGI,EAI8B,CAAE,WAAgB,IAAOC,EAAwE,WAAG,WAAgB,IAAOA,EAAwE,WAAG,MAAW,IAAOA,EAAmE,OAH7TC,EAAI,CAAC,EAAGhB,EAAoBiB,EAAED,EAAGF,GAAWE,GADzC,IAACF,EACJE,ECSL,MAAM,MAAEE,IAAUC,EAAAA,EAAAA,OAAM,gCAAiC,CACxDD,MAAO,CACN,MAAIE,GACH,OAAOC,EAAAA,EAAAA,eAAcD,KAAM,CAC5B,EACA,SAAIE,GACH,MAAM,GAAEF,GAAOF,EACf,OAAOA,EAAME,IAAKE,OAAS,EAC5B,EACA,mBAAIC,GACH,MAAM,GAAEH,GAAOF,EACf,OAAOA,EAAME,IAAKG,kBAAmB,CACtC,EACA,uBAAIC,GACH,MAAM,GAAEJ,GAAOF,EACf,OAAOA,EAAME,IAAKI,qBAAuB,EAC1C,EACA,qBAAIC,GACH,MAAM,GAAEL,GAAOF,EACf,OAAOA,EAAME,IAAKK,mBAAqB,EACxC,EACA,kBAAIC,GACH,MAAM,GAAEN,GAAOF,EACf,OAAOA,EAAME,IAAKM,iBAAkB,CACrC,GAEDC,QAAS,CACRC,cAAgBC,IACf,MAAM,IAAEC,IAAQC,EAAAA,EAAAA,eACV,GAAEX,EAAE,KAAEY,GAASF,EACfG,EAAWJ,EAAMK,QAAQZ,MACzBa,EAAUjB,EAAME,GAGtBF,EAAME,GAAIE,MAAQW,EACd,oBAAsBD,EACzBd,EAAMiB,GAASV,kBAAoBQ,EAEnCf,EAAMiB,GAASb,MAAQW,CACxB,GAGFG,UAAW,CACVC,mBAAoBA,KACnB,MAAMF,EAAUjB,EAAME,GAIhBI,EAAsBnB,OAAOiC,KAAKpB,GAAOqB,MAC7CpC,GACoB,aAApBe,EAAMf,GAAKqC,MACS,oBAApBtB,EAAMf,GAAK6B,OAEbd,EAAMiB,GAASX,oBAAsBA,EACrCN,EAAMM,GAAqBiB,YAAa,CAAI,EAE7CC,mBAAoBA,KACnB,MAAM,MAAEpB,EAAK,kBAAEG,EAAiB,oBAAED,GAAwBN,EACpDiB,EAAUjB,EAAME,GACtB,GAAI,OAASI,GAAuB,KAAOA,EAC1C,OAED,GAAI,KAAOF,EACV,OAED,MAAMqB,EC1DD,CACNC,aAhBoB,QAAQC,KAFgBC,ED2ESxB,GCxDrDyB,aAfoB,QAAQF,KAAKC,GAgBjCE,UAdiB,KAAKH,KAAKC,GAe3BG,oBAb2B,wCAAwCJ,KACnEC,GAaAI,UAViBJ,EAASK,QAAU,GAWpCC,uBARA,oDAAoDP,KAAKC,IAf5C,IAA+BA,ED8E3C,MAAMO,EAAsBhD,OAAOiD,OAClCX,GACCY,OAAOC,IAAsB,IAAXA,IAEpBtC,EAAMM,GAAqBiB,YAAcY,EAEzC,MAAMI,EAAoB,GAC1BpD,OAAOiC,KAAKK,GAAuBe,SAASvD,IAC3C,MAAMwD,EAAQzC,EAAMiB,GAASyB,eAAeC,WAC1CC,GAAcA,EAAU1C,KAAOjB,IAE3B2D,EAAY5C,EAAMiB,GAASyB,eAAeD,GAChDG,EAAUC,IAAMpB,EAAsBxC,GACtCsD,EAAkBE,GAASG,CAAS,IAGrC,MAAME,EAAYvC,IAAsBH,EACxCJ,EAAMiB,GAAST,eAAiBsC,EAEhC,MAAMC,EAAiB/C,EAAMiB,GAASyB,eAAeC,WACnDC,GAA+B,aAAjBA,EAAU1C,KAEpB8C,EACLhD,EAAMiB,GAASyB,eAAeK,GAC/BC,EAAmBH,IAAMC,EACzBP,EAAkBQ,GAAkBC,EACpChD,EAAMiB,GAASyB,eAAiBH,CAAiB,EAElDU,cAAeA,KACd,MAAM,gBAAEC,EAAe,GAAEhD,IAAOC,EAAAA,EAAAA,eAC1B,MAAEC,EAAK,gBAAEC,EAAe,eAAEG,GAAmBR,EACnD,GAAII,EAAO,CACV,MAAM,QAAEK,IAAYR,EAAAA,EAAAA,OAAMiD,GACtBzC,EAAQ0C,mBACP9C,GAAmBG,EACtBC,EAAQ0C,iBAAiB/C,GACdC,GACXI,EAAQ0C,iBAAiB/C,GAG5B","sources":["webpack://@pewresearch/prc-block-library/webpack/bootstrap","webpack://@pewresearch/prc-block-library/webpack/runtime/define property getters","webpack://@pewresearch/prc-block-library/webpack/runtime/hasOwnProperty shorthand","webpack://@pewresearch/prc-block-library/external module \"@wordpress/interactivity\"","webpack://@pewresearch/prc-block-library/./src/form-input-password/view.js","webpack://@pewresearch/prc-block-library/./src/form-input-password/check-password-strength.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getContext\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getContext), [\"getElement\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getElement), [\"store\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store) });","/**\n * WordPress Dependencies\n */\nimport { store, getContext, getElement } from '@wordpress/interactivity';\n\n/**\n * Internal Dependencies\n */\nimport checkPasswordStrength from './check-password-strength';\n\nconst { state } = store('prc-block/form-input-password', {\n\tstate: {\n\t\tget id() {\n\t\t\treturn getContext()?.id || false;\n\t\t},\n\t\tget value() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id]?.value || '';\n\t\t},\n\t\tget hasConfirmation() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id]?.hasConfirmation || false;\n\t\t},\n\t\tget confirmationInputId() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id]?.confirmationInputId || '';\n\t\t},\n\t\tget confirmationValue() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id]?.confirmationValue || '';\n\t\t},\n\t\tget passwordsMatch() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id]?.passwordsMatch || false;\n\t\t},\n\t},\n\tactions: {\n\t\tonInputChange: (event) => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst { id, name } = ref;\n\t\t\tconst newValue = event.target?.value;\n\t\t\tconst blockId = state.id;\n\n\t\t\t// Store the input's value in the appropriate state object for the input:\n\t\t\tstate[id].value = newValue;\n\t\t\tif ('confirmPassword' === name) {\n\t\t\t\tstate[blockId].confirmationValue = newValue;\n\t\t\t} else {\n\t\t\t\tstate[blockId].value = newValue;\n\t\t\t}\n\t\t},\n\t},\n\tcallbacks: {\n\t\tonConfirmationInit: () => {\n\t\t\tconst blockId = state.id;\n\t\t\t// We're going to search through state to find the input field that has a type\n\t\t\t// of password and a name of confirmPassword to get the correct input field.\n\t\t\t// Then we're going to return the key of that input field, the ID.\n\t\t\tconst confirmationInputId = Object.keys(state).find(\n\t\t\t\t(key) =>\n\t\t\t\t\tstate[key].type === 'password' &&\n\t\t\t\t\tstate[key].name === 'confirmPassword'\n\t\t\t);\n\t\t\tstate[blockId].confirmationInputId = confirmationInputId;\n\t\t\tstate[confirmationInputId].isDisabled = true;\n\t\t},\n\t\tonPasswordAnalyzer: () => {\n\t\t\tconst { value, confirmationValue, confirmationInputId } = state;\n\t\t\tconst blockId = state.id;\n\t\t\tif (null === confirmationInputId || '' === confirmationInputId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ('' === value) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst passwordStrengthCheck = checkPasswordStrength(value);\n\n\t\t\t// check if all the values in passwordStrengthCheck are true\n\t\t\tconst disableConfirmInput = Object.values(\n\t\t\t\tpasswordStrengthCheck\n\t\t\t).every((result) => result === true);\n\t\t\t// Disable the confirmationn input if the password does not meet the requirements\n\t\t\tstate[confirmationInputId].isDisabled = !disableConfirmInput;\n\t\t\t// Report the password strength to the user\n\t\t\tconst newConditionsList = [];\n\t\t\tObject.keys(passwordStrengthCheck).forEach((key) => {\n\t\t\t\tconst index = state[blockId].conditionsList.findIndex(\n\t\t\t\t\t(condition) => condition.id === key\n\t\t\t\t);\n\t\t\t\tconst condition = state[blockId].conditionsList[index];\n\t\t\t\tcondition.met = passwordStrengthCheck[key];\n\t\t\t\tnewConditionsList[index] = condition;\n\t\t\t});\n\n\t\t\tconst doesMatch = confirmationValue === value;\n\t\t\tstate[blockId].passwordsMatch = doesMatch;\n\n\t\t\tconst doesMatchIndex = state[blockId].conditionsList.findIndex(\n\t\t\t\t(condition) => condition.id === 'hasMatch'\n\t\t\t);\n\t\t\tconst passMatchCondition =\n\t\t\t\tstate[blockId].conditionsList[doesMatchIndex];\n\t\t\tpassMatchCondition.met = doesMatch;\n\t\t\tnewConditionsList[doesMatchIndex] = passMatchCondition;\n\t\t\tstate[blockId].conditionsList = newConditionsList;\n\t\t},\n\t\tonValueChange: () => {\n\t\t\tconst { targetNamespace, id } = getContext();\n\t\t\tconst { value, hasConfirmation, passwordsMatch } = state;\n\t\t\tif (value) {\n\t\t\t\tconst { actions } = store(targetNamespace);\n\t\t\t\tif (actions.onPasswordChange) {\n\t\t\t\t\tif (hasConfirmation && passwordsMatch) {\n\t\t\t\t\t\tactions.onPasswordChange(value);\n\t\t\t\t\t} else if (!hasConfirmation) {\n\t\t\t\t\t\tactions.onPasswordChange(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n});\n","export default function checkPasswordStrength(password) {\n\t// check if password has a lowercase letter\n\tconst hasLowerCase = /[a-z]/.test(password);\n\t// check if password has an uppercase letter\n\tconst hasUpperCase = /[A-Z]/.test(password);\n\t// check if password has a number\n\tconst hasNumber = /\\d/.test(password);\n\t// check if password has a symbol that is valid\n\tconst hasSpecialCharacter = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(\n\t\tpassword\n\t);\n\t// check if password is at least 12 characters long\n\tconst hasLength = password.length >= 12;\n\t// check that it only contains valid characters\n\tconst hasNoInvalidCharacters =\n\t\t/^[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]*$/.test(password);\n\n\treturn {\n\t\thasLowerCase,\n\t\thasUpperCase,\n\t\thasNumber,\n\t\thasSpecialCharacter,\n\t\thasLength,\n\t\thasNoInvalidCharacters,\n\t};\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","x","d","state","store","id","getContext","value","hasConfirmation","confirmationInputId","confirmationValue","passwordsMatch","actions","onInputChange","event","ref","getElement","name","newValue","target","blockId","callbacks","onConfirmationInit","keys","find","type","isDisabled","onPasswordAnalyzer","passwordStrengthCheck","hasLowerCase","test","password","hasUpperCase","hasNumber","hasSpecialCharacter","hasLength","length","hasNoInvalidCharacters","disableConfirmInput","values","every","result","newConditionsList","forEach","index","conditionsList","findIndex","condition","met","doesMatch","doesMatchIndex","passMatchCondition","onValueChange","targetNamespace","onPasswordChange"],"sourceRoot":""}