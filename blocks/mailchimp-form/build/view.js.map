{"version":3,"file":"view.js","mappings":"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","sources":["webpack://mailchimp-form/webpack/bootstrap","webpack://mailchimp-form/webpack/runtime/define property getters","webpack://mailchimp-form/webpack/runtime/hasOwnProperty shorthand","webpack://mailchimp-form/external module \"@wordpress/interactivity\"","webpack://mailchimp-form/./src/view.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getContext\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getContext), [\"getElement\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getElement), [\"store\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store) });","/**\n * WordPress Dependencies\n */\nimport { store, getContext, getElement } from '@wordpress/interactivity';\n\n/**\n * Internal Dependencies\n */\nconst NAMESPACE = 'prc-block/mailchimp-form';\nconst ENDPOINT = '/prc-api/v3/mailchimp/subscribe';\n\nfunction submitHandler({\n\temailAddress,\n\tcaptchaToken = false,\n\tinterest = false,\n\tNONCE = false,\n}) {\n\tconsole.log('submitHandler', window.wp.url, window.wp.apiFetch);\n\tconst { apiFetch } = window.wp;\n\tconst { isURL, buildQueryString } = window.wp.url;\n\n\tif (!captchaToken) {\n\t\treturn new Error(\n\t\t\t\"We couldn't verify you're not a robot ðŸ¤–. Please try again.\"\n\t\t);\n\t}\n\n\tconst email = emailAddress;\n\n\tconst url = document.URL;\n\tif (!isURL(url)) {\n\t\treturn new Error('Invalid url', url);\n\t}\n\n\tconst path = buildQueryString({\n\t\temail,\n\t\tcaptcha_token: captchaToken,\n\t\tinterests: interest,\n\t\tapi_key: 'mailchimp-form',\n\t\torigin_url: url,\n\t});\n\n\treturn new Promise((resolve, reject) => {\n\t\tapiFetch.use(apiFetch.createNonceMiddleware(NONCE));\n\t\tapiFetch({\n\t\t\tpath: `${ENDPOINT}/?${path}`,\n\t\t\tmethod: 'POST',\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log('RESPONSE:', response);\n\t\t\t\tif (response.success) {\n\t\t\t\t\tresolve(response);\n\t\t\t\t} else {\n\t\t\t\t\treject(response);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\treject(e);\n\t\t\t});\n\t});\n}\n\nconst { state, actions } = store('prc-block/mailchimp-form', {\n\tactions: {\n\t\tonInputChange: (event) => {\n\t\t\tconst { value } = event.target;\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\tconst { id } = ref;\n\t\t\t// Store the value in the global state where we store all primitve inputs.\n\t\t\tstate[id].value = value;\n\t\t\t// Also, store the value in this block's context so we can use it in the submitHandler.\n\t\t\tcontext.emailAddress = state[id].value;\n\t\t},\n\t\tonButtonClick: (event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\tconst { id } = ref;\n\t\t\tcontext.captchaHidden = false;\n\t\t},\n\t\tonCheckboxMouseEnter: () => {\n\t\t\tconsole.log('prc-block/mailchimp-form', 'onCheckboxMouseEnter');\n\t\t},\n\t\tonButtonMouseEnter: () => {\n\t\t\tconsole.log('prc-block/mailchimp-form', 'onButtonMouseEnter');\n\t\t},\n\t\treset: (context) => {\n\t\t\tconst { buttonId, inputId } = context;\n\t\t\tstate[inputId].isError = false;\n\t\t\tstate[inputId].isSuccess = false;\n\t\t\tstate[inputId].value = '';\n\t\t\tstate[buttonId].isError = false;\n\t\t\tstate[buttonId].isSuccess = false;\n\t\t\tstate[buttonId].text = state[buttonId].originalText;\n\t\t\tcontext.captchaToken = false;\n\t\t\tcontext.isError = null;\n\t\t\tcontext.isSuccess = null;\n\t\t\tcontext.messages = [];\n\t\t},\n\t\tclearMessages: () => {\n\t\t\tconst context = getContext();\n\t\t\tactions.reset(context);\n\t\t},\n\t},\n\tcallbacks: {\n\t\tonInit: () => {\n\t\t\t// Get the prc-block/mailchimp-form element\n\t\t\tconst { ref } = getElement();\n\t\t\t// Get the prc-block/mailchimp-form context\n\t\t\tconst context = getContext();\n\t\t\t// Look for the input element inside the prc-block/mailchimp-form element\n\t\t\tconst input = ref.querySelector(\n\t\t\t\t'input.wp-block-prc-block-form-input-text'\n\t\t\t);\n\t\t\t// Store the ID of the input element in the prc-block/mailchimp-form context so it's aware of it's own components.\n\t\t\tif (input?.id) {\n\t\t\t\tcontext.inputId = input?.id;\n\t\t\t}\n\n\t\t\t// Do the same for the button.\n\t\t\tconst button = ref.querySelector('.wp-element-button');\n\t\t\tif (button?.id) {\n\t\t\t\tcontext.buttonId = button?.id;\n\t\t\t}\n\t\t},\n\t\tonKeyDown: (event) => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst input = ref.querySelector(\n\t\t\t\t'input.wp-block-prc-block-form-input-text'\n\t\t\t);\n\t\t\t// Check if the input is focused or not, if not then do nothing...\n\t\t\tif (document.activeElement !== input) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst context = getContext();\n\t\t\tif (event.key === 'Enter') {\n\t\t\t\t// If the user presses the enter key, then submit the form.\n\t\t\t\tactions.onButtonClick();\n\t\t\t}\n\t\t\tif (event.key === 'Escape') {\n\t\t\t\t// If the user presses the escape key, then empty the value of the input.\n\t\t\t\tstate[context.inputId].value = '';\n\t\t\t}\n\t\t},\n\t\t// When the input value changes, watch for an email address and enable/disable the button\n\t\tonInputChange: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { emailAddress, buttonId } = context;\n\t\t\t// check if value is an email address, if it is then enable the button, otherwise disable the button.\n\t\t\tif (emailAddress && emailAddress.includes('@')) {\n\t\t\t\tstate[buttonId].isDisabled = false;\n\t\t\t} else {\n\t\t\t\tstate[buttonId].isDisabled = true;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * This is the callback that runs once the user clicks the button to show the captcha. When the captcha is shown, hide the form elements; when the captcha is hidden, show the form elements.\n\t\t */\n\t\tonCaptchaDisplayHideFormElements: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { captchaHidden, inputId, buttonId } = context;\n\t\t\tif (false === captchaHidden) {\n\t\t\t\tstate[inputId].isHidden = true;\n\t\t\t\tstate[buttonId].isHidden = true;\n\t\t\t}\n\t\t\tif (true === captchaHidden) {\n\t\t\t\tstate[inputId].isHidden = false;\n\t\t\t\tstate[buttonId].isHidden = false;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * This is the callback that runs once the captcha has verified the user is not a robot and hides the captcha.\n\t\t */\n\t\tonCaptchaVerifyHideCaptcha: () => {\n\t\t\tconst context = getContext();\n\t\t\tif (false !== context.captchaToken) {\n\t\t\t\tcontext.captchaHidden = true;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * This is the callback that runs once the captcha has verified the user is not a robot and submits the form and subscribes the user to the designated interest.\n\t\t */\n\t\tonCaptchaVerifyThenSubscribe: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst {\n\t\t\t\tcaptchaToken,\n\t\t\t\tinputId,\n\t\t\t\tbuttonId,\n\t\t\t\temailAddress,\n\t\t\t\tinterest,\n\t\t\t\tNONCE,\n\t\t\t} = context;\n\n\t\t\tif (false !== captchaToken) {\n\t\t\t\tstate[buttonId].text = 'Subscribing...';\n\n\t\t\t\tsubmitHandler({\n\t\t\t\t\temailAddress,\n\t\t\t\t\tinterest,\n\t\t\t\t\tcaptchaToken,\n\t\t\t\t\tNONCE,\n\t\t\t\t})\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tcontext.isSuccess = true;\n\t\t\t\t\t\t// Clear the state after 10 seconds.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tactions.reset(context);\n\t\t\t\t\t\t}, 10000);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\tconsole.error('ERROR', context, e);\n\t\t\t\t\t\tcontext.isError = true;\n\t\t\t\t\t\tcontext.messages = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: 'error',\n\t\t\t\t\t\t\t\ttext: e.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t];\n\t\t\t\t\t\t// Clear the error message after 10 seconds.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tactions.reset(context);\n\t\t\t\t\t\t}, 10000);\n\t\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonSuccess: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { isSuccess, buttonId, inputId } = context;\n\t\t\t// We explicitly check for null because we want to know if it's true or false, which only is set after the submitHandler runs.\n\t\t\tif (null !== isSuccess) {\n\t\t\t\tstate[inputId].isSuccess = isSuccess;\n\t\t\t\tstate[buttonId].isSuccess = isSuccess;\n\t\t\t\tif (true === isSuccess) {\n\t\t\t\t\tstate[buttonId].text = 'Success';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonError: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { isError, buttonId, inputId } = context;\n\t\t\tif (null !== isError && true === isError) {\n\t\t\t\tstate[inputId].isError = true;\n\t\t\t\tstate[buttonId].isError = true;\n\t\t\t\tstate[buttonId].text = 'Error';\n\t\t\t} else if (null !== isError && false === isError) {\n\t\t\t\tactions.reset(context);\n\t\t\t}\n\t\t},\n\t},\n});\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","x","d","state","actions","store","onInputChange","event","value","target","context","getContext","ref","getElement","id","emailAddress","onButtonClick","captchaHidden","onCheckboxMouseEnter","console","log","onButtonMouseEnter","reset","buttonId","inputId","isError","isSuccess","text","originalText","captchaToken","messages","clearMessages","callbacks","onInit","input","querySelector","button","onKeyDown","document","activeElement","includes","isDisabled","onCaptchaDisplayHideFormElements","isHidden","onCaptchaVerifyHideCaptcha","onCaptchaVerifyThenSubscribe","interest","NONCE","window","wp","url","apiFetch","isURL","buildQueryString","Error","email","URL","path","captcha_token","interests","api_key","origin_url","Promise","resolve","reject","use","createNonceMiddleware","method","then","response","success","catch","e","submitHandler","setTimeout","error","message","onSuccess","onError"],"sourceRoot":""}